<?php
use Export\Cell\Cell;
use Export\Cell\EmptyCell;
use Export\Style\Color;
use Export\Style\Merger;
/**
 * Description of XlsComponent
 *
 * @author art3mk4
 */
class XlsxComponent extends ExportComponent
{

    const DEFAULT_WIDTH = 9.43;
    const DEFAULT_HEIGHT = 75;

    /**
     * Excel объект
     * @var type 
     */
    private $_objPHPExcel;

    /**
     * Счётчик колонок
     * @var type 
     */
    private $_columnIterator = 0;

    /**
     * Счётчик строк
     * @var type 
     */
    private $_rowIterator = 0;
    
    //Расширение
    protected $_extension = \Export\Type::XLS;



    /**
     * PHP 5 allows developers to declare constructor methods for classes.
     * Classes which have a constructor method call this method on each newly-created object,
     * so it is suitable for any initialization that the object may need before it is used.
     *
     * Note: Parent constructors are not called implicitly if the child class defines a constructor.
     * In order to run a parent constructor, a call to parent::__construct() within the child constructor is required.
     *
     * param [ mixed $args [, $... ]]
     * @return void
     * @link http://php.net/manual/en/language.oop5.decon.php
     */
    function __construct()
    {
        $this->_objPHPExcel = new PHPExcel();
        //Загружаем Xls
        $this->_objPHPExcel->getProperties()
            ->setCreator("ixtlan")
            ->setLastModifiedBy("ixtlan")
            ->setTitle("Office 2007 XLSX Test Document")
            ->setSubject("Office 2007 XLSX Test Document")
            ->setDescription("Document for Office 2007 XLSX, generated using PHP classes.")
            ->setKeywords("office 2007 openxml php")
            ->setCategory("result file");
        $this->_objPHPExcel->getActiveSheet()->setTitle('отчет');
    }

    public function addHeaders()
    {
        parent::addHeaders(); // TODO: Change the autogenerated stub
        $this->setColumnDefault();
    }


    private function setColumnDefault()
    {
        foreach ($this->_schema->getColumns() as $key => $column) {
            $this->_objPHPExcel->getActiveSheet()->getColumnDimension(
                PHPExcel_Cell::stringFromColumnIndex($key)
            )->setWidth(self::DEFAULT_WIDTH);
        }

        $this->_objPHPExcel->getActiveSheet()
            ->getRowDimension($this->_rowIterator)
            ->setRowHeight(self::DEFAULT_HEIGHT);

        foreach($this->_schema->getColumns() as $key => $column) {
            $this->_objPHPExcel->getActiveSheet()
                ->getCellByColumnAndRow($key, $this->_rowIterator)
                ->getStyle()->getAlignment()->setWrapText(true);
        }
    }


    private function setAutoFilter()
    {
        $this->_objPHPExcel->getActiveSheet()->setAutoFilter(
            $this->_objPHPExcel->getActiveSheet()->calculateWorksheetDimension()
        /*'A' .$this->_columnIterator . ':' .
        $this->_objPHPExcel->getActiveSheet()->getHighestColumn() . $this->_objPHPExcel->getActiveSheet()->getHighestRow()*/
        );
    }


    /**
     * @return Cell[]
     */
    private function getFieldsData()
    {
        $tempData = array();
        foreach ($this->_schema->getColumns() as $column) {
            $field = $column->getId();
            if (isset($this->_row[$field])) {
                $tempData[$field] = $this->_row[$field];
            } else {
                $tempData[$field] = new EmptyCell();
            }
        }

        return $tempData;
    }


    /**
     * 
     */
    public function saveRow()
    {
        $tempData = $this->getFieldsData();

        //new string
        $this->_rowIterator++;

        $this->_columnIterator = 0;
        $cellWithStyle = null;
        foreach ($tempData as $cell) {
            $this->_objPHPExcel->getActiveSheet()
               ->setCellValueByColumnAndRow($this->_columnIterator, $this->_rowIterator,
                    $this->createOutputCell($cell)
            );
            if ($cell->getStyle() != null) {
                $cellWithStyle = $cell;
            }
            //new column
            $this->_columnIterator++;
        }
        if (isset($cellWithStyle)) {
            $this->formatRow($cellWithStyle);
        }
    }

    private function formatRow(Cell $cell)
    {
        $style = $cell->getStyle();
        foreach ($style->mergers as $merger) {
            $this->applyMerger($merger);
        }
    }

    private function createOutputCell(Cell $cell)
    {
        $objRichText = new PHPExcel_RichText();
        if ($cell->getValue() != '') {
            $run = $objRichText->createTextRun($cell->getValue());
        }

        $style = $cell->getStyle();
        if (isset($style)) {
            if (null !== $style->color) {
                $this->applyColor($style->color);
            }
            if (null !== $style->colorText and isset($run)) {
                $this->applyColorText($run, $style->colorText);
            }
            if (null !== $style->width) {
                $this->applyWidth($style->width);
            }
            if ($style->border) {
                $this->applyBorder();
            }

        }
        return $objRichText;
    }

    private function applyColorText(PHPExcel_RichText_Run $run, $colorText)
    {
        $run->getFont()->setColor($this->getColor($colorText));
    }

    private function applyBorder()
    {
        $this->_objPHPExcel->getActiveSheet()
            ->getCellByColumnAndRow($this->_columnIterator, $this->_rowIterator)
            ->getStyle()
            ->getBorders()->getAllBorders()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);
    }

    private function applyWidth($width)
    {
        $this->_objPHPExcel->getActiveSheet()->getColumnDimension(
            PHPExcel_Cell::stringFromColumnIndex($this->_columnIterator)
        )->setAutoSize(false)->setWidth($width);
    }

    private function applyColor($color)
    {
        $this->_objPHPExcel->getActiveSheet()
            ->getCellByColumnAndRow($this->_columnIterator, $this->_rowIterator)
            ->getStyle()->getFill()
            ->setFillType(PHPExcel_Style_Fill::FILL_SOLID)
            ->setStartColor($this->getColor($color))
            ->setEndColor($this->getColor($color));
    }

    /**
     * @param $color
     * @return null|PHPExcel_Style_Color
     */
    private function getColor($color)
    {
        $colors = array(
            Color::GREEN => new PHPExcel_Style_Color(PHPExcel_Style_Color::COLOR_GREEN),
            Color::RED => new PHPExcel_Style_Color(PHPExcel_Style_Color::COLOR_RED),
            Color::YELLOW => new PHPExcel_Style_Color(PHPExcel_Style_Color::COLOR_YELLOW),
            Color::GRAY => new PHPExcel_Style_Color('FFB0B0B0')
        );
        if (!isset($colors[$color])) {
            return null;
        }
        return $colors[$color];
    }

    private function applyMerger(Merger $merger)
    {
        $numbers = $merger->getNumberColumns($this->_schema);
        if (count($numbers) < 2) {
            return;
        }
        $firstNumber = $numbers[0];
        $lastNumber = $numbers[count($numbers) - 1];


        $this->_objPHPExcel->getActiveSheet()
            ->mergeCellsByColumnAndRow($firstNumber, $this->_rowIterator, $lastNumber, $this->_rowIterator);
    }

    /**
     * 
     * @param type $file
     * @param type $pdf
     */
    public function saveFile($path, $name)
    {
        $nameWithoutExt = basename($name, "." . $this->_extension);
        $filename = "{$nameWithoutExt }." . $this->_extension;
        $fullname = $path . "/{$filename}";
        $objWriter = new PHPExcel_Writer_Excel2007($this->_objPHPExcel);
        $objWriter->save($fullname);
        return $filename;
    }

}